CREATE TABLE token ()

CREATE TABLE club (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL, -- Pas trop obligé ^^
    address VARCHAR(255) NOT NULL,
    master_id INT UNSIGNED,
    CONSTRAINT fk_club_master
        FOREIGN KEY (master_id)
        REFERENCES users(id)
        ON DELETE SET NULL
        ON UPDATE RESTRICT
)

CREATE TABLE users (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    age INT NOT NULL,
    status ENUM('pratiquant', 'maitre') DEFAULT 'pratiquant',
    avatar VARCHAR(255) DEFAULT NULL,
    club_id INT UNSIGNED,
    matricule VARCHAR(255) UNIQUE DEFAULT NULL, -- Matricule unique (généré automatiquement après l'affiliation)
    grade VARCHAR(255) DEFAULT NULL,
    phone_number VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    bio TEXT DEFAULT NULL,

    role ENUM('users', 'admin', 'super admin') DEFAULT 'users',
    token TEXT DEFAULT NULL,
    sign_at DATETIME DEFAULT NULL,
    reset_password_token TEXT DEFAULT NULL,
    reset_password_at DATETIME DEFAULT NULL,
    chang_mail VARCHAR(255) DEFAULT NULL,
    message_at TIMESTAMP NULL, -- Temps a attendre pour un envoyer plus de 2 messages
    delete_requested_at DATETIME DEFAULT NULL, -- Supprimer compte
    locked_until DATETIME DEFAULT NULL, -- Temps jusqu'auquel le compte est bloqué
    CONSTRAINT fk_users_club
        FOREIGN KEY (club_id)
        REFERENCES club(id)
        ON DELETE SET NULL
        ON UPDATE RESTRICT -- Ici on doit savoir si le club supprimé, supprime les users
)

CREATE TABLE login_attempts (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNSIGNED,
    attempt_time DATETIME DEFAULT CURRENT_TIMESTAMP
)

CREATE TABLE affilier (
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNSIGNED,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT fk_affilier_users
        FOREIGN KEY (user_id)
        REFERENCES users(id)
        ON DELETE CASCADE
        ON UPDATE RESTRICT
)



-- Index

    -- Users
    CREATE INDEX idx_users_email ON users(email);
    CREATE INDEX idx_users_username ON users(username);
    CREATE INDEX idx_users_sign_at ON users(sign_at)